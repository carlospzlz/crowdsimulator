digraph "GLWindow"
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{GLWindow\n|- m_updateCrowdEngineTimer\l- m_updateFPSTimer\l- m_boundingBox\l- m_groundSteps\l- m_fps\l- m_frameCounter\l- m_text\l- m_rotate\l- m_translate\l- m_previousMousePosition\land 23 more...\l- s_dummiesPath\l- s_brainsPath\l- s_agentsPath\l- s_rotationIncrement\l- s_translationIncrement\l- s_zoomIncrement\l|+ GLWindow()\l+ ~GLWindow()\l+ setTimerInterval()\l+ setWireframeMode()\l+ setStep()\l+ toggleSimulation()\l+ setDrawAxis()\l+ setDrawCells()\l+ setDrawBoundingBox()\l+ setDrawCollisionRadius()\l+ setDrawVelocityVector()\l+ setDrawVisionRadius()\l+ setDrawStrength()\l+ setDrawStateColour()\l+ setCurrentDummy()\land 12 more...\l# initializeGL()\l# resizeGL()\l# paintGL()\l- buildBoidVAO()\l- loadMatricesToShader()\l- drawCollisionCylinder()\l- drawCollisionSphere()\l- drawVector()\l- drawRadius()\l- drawStrength()\l- setStateColour()\l- mouseMoveEvent()\l- mousePressEvent()\l- mouseReleaseEvent()\l- wheelEvent()\l- updateSimulation()\l- updateFPS()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node2 [label="{QGLWidget\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_crowdEngine" ,arrowhead="odiamond",fontname="FreeSans"];
  Node3 [label="{CrowdEngine\n|- m_agents\l- m_initialAgents\l- s_brainsPath\l- s_loadedBrains\l- s_luaState\l|+ CrowdEngine()\l+ ~CrowdEngine()\l+ setCellPartition()\l+ setPhysicsEngine()\l+ setStep()\l+ setFriction()\l+ setGravity()\l+ getAgentsBegin()\l+ getAgentsEnd()\l+ getBoundingBoxSize()\land 14 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_crowd_engine.html",tooltip="This is the core class of the application. It is the abstract virtual world; it stores the agents and..."];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -m_physicsEngine" ,arrowhead="odiamond",fontname="FreeSans"];
  Node4 [label="{PhysicsEngine\n|# s_epsilon\l- m_type\l- m_boundingBoxSize\l- m_friction\l- m_gravity\l|+ PhysicsEngine()\l+ setBoundingBoxSize()\l+ setFriction()\l+ setGravity()\l+ getBoundingBoxSize()\l+ getType()\l+ checkCollision()\l+ checkCollisionBoundingBox()\l+ checkCollisionGround()\l+ applyFriction()\l+ applyGravity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_physics_engine.html",tooltip="This abstract class represents the interface of a physics engine, which is the responsible of handle ..."];
  Node5 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -m_cellPartition" ,arrowhead="odiamond",fontname="FreeSans"];
  Node5 [label="{CellPartition\n|# m_cellSize\l|+ CellPartition()\l+ ~CellPartition()\l+ getCellSize()\l+ addAgent()\l+ addAgents()\l+ updateCells()\l+ updateNeighbours()\l+ rearrangePartition()\l+ printCells()\l+ clear()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_cell_partition.html",tooltip="Abstract class which defines the interface of a cell partition mechanism. This is essential for handl..."];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_parser" ,arrowhead="odiamond",fontname="FreeSans"];
  Node6 [label="{Parser\n||+ loadAgents()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_parser.html",tooltip="This abstract class represents the interface of a parser to load agents from files with different for..."];
}
